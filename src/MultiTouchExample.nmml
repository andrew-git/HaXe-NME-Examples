<?xml version="1.0" encoding="utf-8"?>
<!-- 
@author: Andras Csizmadia <www.vpmedia.eu>      
@version: 1.0.0
-->
<project> 

    <!-- The app node controls general settings about your application, like the code entry point or the meta data to use while packaging. -->
    <app
        file="MultiTouchExample"
        title="MultiTouchExample"
        package="hu.vpmedia.haxe.nme"
        version="1.0.0"
        company="vpmedia"
        main="MultiTouchExample"
    />  

    <!-- The window node controls how your application will be displayed on each platform.  -->
    <window
        width="800"
        height="600"
        orientation="landscape"
        fps="30"
        background="0xFFFFFF"
        resizeable="true"
        hardware="false"
    />        

    <!-- You can use the set and unset node tags to shape the values that are defined for the install tool. -->
    <set name="fullscreen" value="1" if="target_webos" />
    <set name="fullscreen" value="1" if="target_android" />
    <set name="fullscreen" value="1" if="target_ios" />
    <set name="BUILD_DIR" value="bin" /> 
    <set name="SWF_VERSION" value="10.1" />

    <!-- You can use the classpath node to include a Haxe source code directory when compiling your project. Set the "name" attribute to the relative or absolute path to your target directory. -->
    <classpath name="." />  
    
    <!-- In addition to classpaths, you can use the haxelib node to include code from an installed library off of haxelib.  -->             
    <haxelib name="nme" /><!--framework--> 

    <!-- You can include precompiled native libraries with your project.  -->
    <ndll name="std" />
    <ndll name="regexp" />
    <ndll name="zlib" />
    <ndll name="nme" haxelib="nme" />

    <setenv name="no_console" value="1" />

    <!-- The haxedef node will add a define ("-D ") to the command line when running the Haxe compiler. --> 
    <haxedef name="haxe3" /> 
    <haxedef name="haxe-boot" /> 
    <haxedef name="fdb" if="target_flash" /><!--fdb : include the Debugger tag in SWF output and extra debug infos (enable interactive debugging of Flash content)-->  
    <haxedef name="network-sandbox" if="target_flash" /><!--network-sandbox : use the network sandbox flag for SWF output--> 
    <!--haxedef name="swf-protected" if="target_flash" /-->
    
    <!-- The compilerflag node will pass an additional option to the Haxe compiler.  -->
    <compilerflag name="-debug" /> 
    <compilerflag name="--remap flash:nme" />     
    <compilerflag name="--times" /> 
    <!--compilerflag name="--dead-code-elimination" /--> 
    <compilerflag name="--flash-strict" if="target_flash" />   

</project>
